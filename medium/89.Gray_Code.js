/**
 * @param {number} n
 * @return {number[]}
 */
/**
 * @param {number} n
 * @return {number[]}
 */
var grayCode = function (n) {
    // 利用格雷编码的对称性来做
    // 利用上一次的格雷码，前半部分加0，后半部分反转后加1
    // 此处的加0和加1，是指二进制加0和加1，需要计算出prefix，并且通过或运算加上去，并不是字符串拼接
  
    // [0]
  
    // 0 + [0] => [0] ;1(2^0) + [0] = [1]
  
    // 0 + [0, 1] => [00, 01] ; 2(10, 2^1) + [1, 0]  => [11, 10]
  
    // 0 + [00, 01, 11, 10] => [000, 001, 011, 010] ; 4(100, 2^2) + [10, 11, 01, 00]  => [110, 111, 101, 100]
  
    // 对 00 使用 4 | 00 生成 100（即 4）。
    // 对 01 使用 4 | 01 生成 101（即 5）。
    // 对 11 使用 4 | 11 生成 111（即 7）。
    // 对 10 使用 4 | 10 生成 110（即 6）。
  
    let result = [0];
  
    for (let i = 0; i < n; i++) {
      const prefix = 1 << i; // 1，10，100正好是1的左移0，1，2位
      for (let j = result.length - 1; j >= 0; j--) {
        result.push(prefix | result[j]);
      }
    }
    return result;
  };